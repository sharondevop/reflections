When would you want to use a remote repository rather then keeping all your work local?

      When I need to share my project with more people all over the internet.
      I can save a backup on a remote repository, and access it for any computer.

Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

      When I work locally I want to be in control in my changes.
      If a developer change the code on the remote repository, i wanna know
      what im pulling to my local repository.

Describe the differences between forks, clones, and branches. when would you
use one instead on another?

    forks is used only on GitHub platform, i will use fork when i need clone a repository from a user
    on GitHub and add it to my Github account. this way i can use the user repository as is was created by me.

    clones is used for copy a repository from GitHub to my local machine.
    it allow me to add, commit the repository locally.

    branches are used locally and remotely to logically groups commit.
    branches are a fancy name for tag a logical commit group, I can use branch for different part in my code.
    e.g., fix a bug, working on a new feature.

What is the benefit of having a copy of the last known state of the remote stored locally?

    I can fetch the last known state of the remote, and work in it off line.
    I can compere the differential between the origin/master and my master.
    and when i am want i can merge the two.

How would you collaborate without using Git or Github? What will be easier,
and what would be harder?

    I will use Google drive or dropbox to share my directory on the Internet.
    it will be harder for me follow the changes, and to have a control over it.

   It will be easier to use Git and Github. by using it, I can follow the changes, manage what changes to apply.
   compare the changes, have a list of history , critical value that I will have if i using git and GitHub,is the ability
   to go back to previous versions of my files.

When would you want to make changes in separate branch rather than directly in master?
What benefits does each approach have?

    when I'm collaborating with a team of people i will separate branches for my master , and for
    my development. this approach will keep my master clean and working.

    I will use a separate branch if I wanna test new feature.

    by managing different branches I can control what are the changes I want to include in my code.
    I can create a branch for my team to work on a specific bug.
